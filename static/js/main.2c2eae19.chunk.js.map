{"version":3,"sources":["components/Jumbotron/Jumbotron.js","components/TeamCard/TeamCard.js","components/Wrapper/Wrapper.js","App.js","serviceWorker.js","index.js"],"names":["Jumbotron","props","react_default","a","createElement","className","score","target","TeamCard","alt","name","src","logo","onClick","confirmClick","id","Wrapper","children","App","state","clickedLogo","_this","indexOf","setState","push","console","log","shuffleLogo","array","length","teamLogo","Math","floor","random","_this2","this","Fragment","components_Jumbotron_Jumbotron","components_Wrapper_Wrapper","map","team","components_TeamCard_TeamCard","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2+HAceA,eAXG,SAAAC,GAAK,OACrBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,6BACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,aAAd,wBACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cAAd,gDACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,gBAAd,kBAA6CJ,EAAMK,OACnDJ,EAAAC,EAAAC,cAAA,MAAIC,UAAU,eAAd,kBAA4CJ,EAAMM,YCOvCC,SAbE,SAAAP,GAAK,OAClBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACXH,EAAAC,EAAAC,cAAA,OACEK,IAAKR,EAAMS,KACXC,IAAKV,EAAMW,KACXC,QAAS,kBAAMZ,EAAMa,aAAab,EAAMc,OAE1Cb,EAAAC,EAAAC,cAAA,UAAKH,EAAMS,gBCJNM,MAJf,SAAiBf,GACf,OAAOC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWJ,EAAMgB,kBCuE1BC,6MAjEbC,MAAQ,CAENC,YAAa,GACbd,MAAO,EACPC,OAAQ,KAIVO,aAAe,SAAAF,GACb,GAAGS,EAAKF,MAAMC,YAAYE,QAAQV,IAAS,EAOzC,OANAS,EAAKE,SAAS,CAAEH,YAAa,KAE1BC,EAAKF,MAAMb,MAAQe,EAAKF,MAAMZ,QAC/Bc,EAAKE,SAAS,CAAEhB,OAAQc,EAAKF,MAAMb,aAErCe,EAAKE,SAAS,CAAEjB,MAAO,IAIvB,IAAIA,EAAQe,EAAKF,MAAMb,QACvBA,EAEWe,EAAKF,MAAMZ,QACpBc,EAAKE,SAAS,CAAEhB,OAAQD,IAE1Be,EAAKE,SAAS,CAAEjB,MAAOA,IAGzB,IAAIc,EAAcC,EAAKF,MAAMC,YAC7BA,EAAYI,KAAKZ,GAEjBS,EAAKE,SAAS,CAAEH,gBAChBK,QAAQC,IAAIL,EAAKF,MAAMC,gBAGzBO,YAAc,WAEV,IADF,IAAMC,EAAQ,GACNA,EAAMC,SAAWjB,EAAKiB,QAAO,CACjC,IAAIC,EAAWlB,EAAKmB,KAAKC,MAAMD,KAAKE,SAASrB,EAAKiB,SAC/CD,EAAMN,QAAQQ,GAAY,GAC3BF,EAAMJ,KAAKM,GAGf,OAAOF,2EAGF,IAAAM,EAAAC,KACP,OACEjC,EAAAC,EAAAC,cAAAF,EAAAC,EAAAiC,SAAA,KACElC,EAAAC,EAAAC,cAACiC,EAAD,CAAW/B,MAAO6B,KAAKhB,MAAMb,MAAOC,OAAQ4B,KAAKhB,MAAMZ,SACrDL,EAAAC,EAAAC,cAACkC,EAAD,KACGH,KAAKR,cAAcY,IAAI,SAAAC,GAAI,OAC1BtC,EAAAC,EAAAC,cAACqC,EAAD,CACE3B,aAAcoB,EAAKpB,aACnBC,GAAIyB,EAAKzB,GACTL,KAAM8B,EAAK9B,KACXE,KAAM4B,EAAK5B,kBA1DT8B,aCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO/C,EAAAC,EAAAC,cAAC8C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.2c2eae19.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Jumbotron.css\";\r\n\r\nconst Jumbotron = props => (\r\n  <div className=\"jumbotron jumbotron-fluid\">\r\n  <div className=\"container\">\r\n    <h1 className=\"display-4\">NFL Team Memory Game</h1>\r\n    <h5 className=\"click-card\">Click any team logo, but only click it once!</h5>\r\n    <h3 className=\"currentScore\">Current Score: {props.score}</h3>\r\n    <h3 className=\"scoreToBeat\">Score to Beat: {props.target}</h3>\r\n  </div>\r\n</div>\r\n)\r\n\r\nexport default Jumbotron;","import React from \"react\";\r\nimport \"./TeamCard.css\";\r\n\r\nconst TeamCard = props => (\r\n    <div className=\"card\">\r\n      <div className=\"logo-container\">\r\n          <img \r\n            alt={props.name}\r\n            src={props.logo}\r\n            onClick={() => props.confirmClick(props.id)}\r\n          />\r\n          <h6>{props.name}</h6>\r\n      </div>  \r\n    </div>\r\n)\r\n\r\nexport default TeamCard;","import React from \"react\";\r\nimport \"./Wrapper.css\";\r\n\r\nfunction Wrapper(props) {\r\n  return <div className=\"wrapper\">{props.children}</div>;\r\n}\r\n\r\nexport default Wrapper;","import React, { Component } from 'react';\nimport './App.css';\nimport Jumbotron from \"./components/Jumbotron\";\nimport TeamCard from \"./components/TeamCard\";\nimport Wrapper from \"./components/Wrapper\";\nimport logo from \"./teams.json\"\n\n\nclass App extends Component {\n  \n  state = {\n    // teams,\n    clickedLogo: [],\n    score: 0,\n    target: 0,\n    // status: \"\"\n  };\n\n  confirmClick = logo => {\n    if(this.state.clickedLogo.indexOf(logo) > -1) {\n      this.setState({ clickedLogo: [] })\n\n      if(this.state.score > this.state.target) {\n        this.setState({ target: this.state.score })\n      }\n      this.setState({ score: 0 })\n      return;\n    \n    } else {\n      let score = this.state.score;\n      score++;\n\n      if(score > this.state.target) {\n        this.setState({ target: score })\n      }\n      this.setState({ score: score})\n    }\n\n    let clickedLogo = this.state.clickedLogo\n    clickedLogo.push(logo)\n\n    this.setState({ clickedLogo })\n    console.log(this.state.clickedLogo)\n  }\n\n  shuffleLogo = () => {\n    const array = [];\n      while(array.length !== logo.length){\n        let teamLogo = logo[Math.floor(Math.random()*logo.length)];\n        if(array.indexOf(teamLogo) < 0){\n          array.push(teamLogo)\n        }\n      }\n      return array\n  }\n\n  render() {\n    return (\n      <>\n        <Jumbotron score={this.state.score} target={this.state.target} />\n          <Wrapper>\n            {this.shuffleLogo().map(team => (\n              <TeamCard\n                confirmClick={this.confirmClick}\n                id={team.id}\n                name={team.name}\n                logo={team.logo}    \n              />\n            ))}\n          </Wrapper>\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}